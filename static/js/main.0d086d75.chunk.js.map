{"version":3,"sources":["molecule/Header.jsx","organism/Cell.jsx","molecule/MainContent.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Cell","value","handleClick","useEffect","document","getElementsByClassName","addEventListener","event","alert","onClick","MainContent","useState","Array","fill","cellPosition","setCellPosition","xIsNext","setXIsNext","calculateWinner","lines","i","length","a","b","c","winner","console","log","map","index","cell","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sRAYeA,MAVf,WACE,OACE,qBAAKC,UAAU,SAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,kD,aCHO,SAASC,EAAT,GAAuC,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YAQpC,OAPEC,qBAAU,WACIC,SAASC,uBAAuB,gBAAgB,GACtDC,iBAAiB,SAAS,SAAUC,GACtCC,MAAM,aAKZ,qBAAKT,UAAU,eAAeU,QAASP,EAAvC,SACGD,I,MCTQ,SAASS,IAAe,IAAD,EACIC,mBAASC,MAAM,GAAGC,KAAK,OAD3B,mBAC7BC,EAD6B,KACfC,EADe,OAENJ,oBAAS,GAFH,mBAE7BK,EAF6B,KAEpBC,EAFoB,KAe9BC,EAAkB,SAACJ,GAWvB,IAVA,IAAMK,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GACEV,EAAaQ,IACbR,EAAaQ,KAAOR,EAAaS,IACjCT,EAAaQ,KAAOR,EAAaU,GAEjC,OAAOV,EAAaQ,GAGxB,OAAO,MAGHG,EAASP,EAAgBJ,GAQ/B,OANIW,EACO,WAAaA,EAEb,iBAAmBT,EAAU,IAAM,KAE9CU,QAAQC,IAAIF,EAAQ,UAElB,qBAAK1B,UAAU,cAAf,SA7CQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GA8C1B6B,KAAI,SAACC,GAAD,OACL,cAAC,EAAD,CACE5B,MAAOa,EAAae,GACpB3B,YAAa,kBA/CH,SAACkB,GAEnB,IAAMU,EAAOhB,EAAaiB,QACtBb,EAAgBJ,IAAiBA,EAAaM,KAGlDU,EAAKV,GAAKJ,EAAU,IAAM,IAC1BD,EAAgBe,GAChBb,GAAYD,IAuCed,CAAY2B,WCvC5BG,MAbf,WACE,OACE,qCACE,iCACE,cAAC,EAAD,MAEF,sBAAMjC,UAAU,iBAAhB,SACE,cAAC,EAAD,UCCOkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASyC,eAAe,SAM1BZ,M","file":"static/js/main.0d086d75.chunk.js","sourcesContent":["import './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"Header\">\r\n      <header className=\"Header-header\">\r\n        <h1>Tic Tac Toe</h1>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useEffect } from 'react';\r\nimport \"./Cell.css\";\r\n\r\nexport default function Cell({ value, handleClick }) {\r\n    useEffect(() => {\r\n        let div = document.getElementsByClassName(\"content-cell\")[0];\r\n        div.addEventListener(\"click\", function (event) {\r\n          alert(\"Hi!\");\r\n        });\r\n    })\r\n\r\n  return (\r\n    <div className=\"content-cell\" onClick={handleClick}>\r\n      {value}\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport Cell from \"../organism/Cell\";\r\nimport \"./MainContent.css\";\r\n\r\nexport default function MainContent() {\r\n  const [cellPosition, setCellPosition] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXIsNext] = useState(false);\r\n  let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n  const handleClick = (i) => {\r\n    debugger;\r\n    const cell = cellPosition.slice();\r\n    if (calculateWinner(cellPosition) || cellPosition[i]) {\r\n      return;\r\n    }\r\n    cell[i] = xIsNext ? \"X\" : \"O\";\r\n    setCellPosition(cell);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n  const calculateWinner = (cellPosition) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (\r\n        cellPosition[a] &&\r\n        cellPosition[a] === cellPosition[b] &&\r\n        cellPosition[a] === cellPosition[c]\r\n      ) {\r\n        return cellPosition[a];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const winner = calculateWinner(cellPosition);\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n  console.log(winner, 'winner')\r\n  return (\r\n    <div className=\"mainContent\">\r\n      {arr.map((index) => (\r\n          <Cell\r\n            value={cellPosition[index]}\r\n            handleClick={() => handleClick(index)}\r\n          />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\r\nimport Header from './molecule/Header';\r\nimport MainContent from './molecule/MainContent';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <header>\r\n        <Header />\r\n      </header>\r\n      <main className=\"main-container\">\r\n        <MainContent />\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}